// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pay.proto

package pay

import (
	context "context"
	base "github.com/cba/spec/go/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayClient is the client API for Pay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayClient interface {
	// 生成订单信息
	Gen(ctx context.Context, in *OrderGenReq, opts ...grpc.CallOption) (*GenResp, error)
	// 获取支付参数
	PaymentInfo(ctx context.Context, in *PaymentInfoReq, opts ...grpc.CallOption) (*base.Map, error)
	// 申请退款
	Refund(ctx context.Context, in *RefundReq, opts ...grpc.CallOption) (*base.Empty, error)
}

type payClient struct {
	cc grpc.ClientConnInterface
}

func NewPayClient(cc grpc.ClientConnInterface) PayClient {
	return &payClient{cc}
}

func (c *payClient) Gen(ctx context.Context, in *OrderGenReq, opts ...grpc.CallOption) (*GenResp, error) {
	out := new(GenResp)
	err := c.cc.Invoke(ctx, "/pay.pay/Gen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) PaymentInfo(ctx context.Context, in *PaymentInfoReq, opts ...grpc.CallOption) (*base.Map, error) {
	out := new(base.Map)
	err := c.cc.Invoke(ctx, "/pay.pay/PaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) Refund(ctx context.Context, in *RefundReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/pay.pay/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServer is the server API for Pay service.
// All implementations must embed UnimplementedPayServer
// for forward compatibility
type PayServer interface {
	// 生成订单信息
	Gen(context.Context, *OrderGenReq) (*GenResp, error)
	// 获取支付参数
	PaymentInfo(context.Context, *PaymentInfoReq) (*base.Map, error)
	// 申请退款
	Refund(context.Context, *RefundReq) (*base.Empty, error)
	mustEmbedUnimplementedPayServer()
}

// UnimplementedPayServer must be embedded to have forward compatible implementations.
type UnimplementedPayServer struct {
}

func (UnimplementedPayServer) Gen(context.Context, *OrderGenReq) (*GenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gen not implemented")
}
func (UnimplementedPayServer) PaymentInfo(context.Context, *PaymentInfoReq) (*base.Map, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentInfo not implemented")
}
func (UnimplementedPayServer) Refund(context.Context, *RefundReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedPayServer) mustEmbedUnimplementedPayServer() {}

// UnsafePayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServer will
// result in compilation errors.
type UnsafePayServer interface {
	mustEmbedUnimplementedPayServer()
}

func RegisterPayServer(s grpc.ServiceRegistrar, srv PayServer) {
	s.RegisterService(&Pay_ServiceDesc, srv)
}

func _Pay_Gen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderGenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).Gen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.pay/Gen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).Gen(ctx, req.(*OrderGenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_PaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).PaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.pay/PaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).PaymentInfo(ctx, req.(*PaymentInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.pay/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).Refund(ctx, req.(*RefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pay_ServiceDesc is the grpc.ServiceDesc for Pay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pay.pay",
	HandlerType: (*PayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gen",
			Handler:    _Pay_Gen_Handler,
		},
		{
			MethodName: "PaymentInfo",
			Handler:    _Pay_PaymentInfo_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _Pay_Refund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
