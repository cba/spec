// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0--rc2
// source: product.proto

package product

import (
	context "context"
	base "github.com/cba/spec/go/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	// Attr 列表
	AttrList(ctx context.Context, in *base.ListReq, opts ...grpc.CallOption) (*AttrListResp, error)
	// Attr 详情
	AttrDetail(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*AttrItem, error)
	// Attr 更新或创建
	AttrUpdateOrCreate(ctx context.Context, in *AttrItem, opts ...grpc.CallOption) (*base.Empty, error)
	// Attr 删除
	AttrDelete(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*base.Empty, error)
	// Group 列表
	GroupList(ctx context.Context, in *base.ListReq, opts ...grpc.CallOption) (*GroupListResp, error)
	// Group 详情
	GroupDetail(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*GroupItem, error)
	// Group 更新或创建
	GroupUpdateOrCreate(ctx context.Context, in *GroupItem, opts ...grpc.CallOption) (*base.Empty, error)
	// Group 删除
	GroupDelete(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*base.Empty, error)
	// Category 列表
	CategoryList(ctx context.Context, in *base.ListReq, opts ...grpc.CallOption) (*CategoryListResp, error)
	// Category 详情
	CategoryDetail(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*CategoryItem, error)
	// Category 更新或创建
	CategoryUpdateOrCreate(ctx context.Context, in *CategoryItem, opts ...grpc.CallOption) (*base.Empty, error)
	// Category 删除
	CategoryDelete(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*base.Empty, error)
	// Product 列表
	ProductList(ctx context.Context, in *base.ListReq, opts ...grpc.CallOption) (*ProductListResp, error)
	// Product 详情
	ProductDetail(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*ProductItem, error)
	// Product 更新或创建
	ProductUpdateOrCreate(ctx context.Context, in *ProductItem, opts ...grpc.CallOption) (*base.Empty, error)
	// Product 删除
	ProductDelete(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*base.Empty, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) AttrList(ctx context.Context, in *base.ListReq, opts ...grpc.CallOption) (*AttrListResp, error) {
	out := new(AttrListResp)
	err := c.cc.Invoke(ctx, "/product.Product/AttrList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AttrDetail(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*AttrItem, error) {
	out := new(AttrItem)
	err := c.cc.Invoke(ctx, "/product.Product/AttrDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AttrUpdateOrCreate(ctx context.Context, in *AttrItem, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/product.Product/AttrUpdateOrCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AttrDelete(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/product.Product/AttrDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GroupList(ctx context.Context, in *base.ListReq, opts ...grpc.CallOption) (*GroupListResp, error) {
	out := new(GroupListResp)
	err := c.cc.Invoke(ctx, "/product.Product/GroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GroupDetail(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*GroupItem, error) {
	out := new(GroupItem)
	err := c.cc.Invoke(ctx, "/product.Product/GroupDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GroupUpdateOrCreate(ctx context.Context, in *GroupItem, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/product.Product/GroupUpdateOrCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GroupDelete(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/product.Product/GroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryList(ctx context.Context, in *base.ListReq, opts ...grpc.CallOption) (*CategoryListResp, error) {
	out := new(CategoryListResp)
	err := c.cc.Invoke(ctx, "/product.Product/CategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryDetail(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*CategoryItem, error) {
	out := new(CategoryItem)
	err := c.cc.Invoke(ctx, "/product.Product/CategoryDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryUpdateOrCreate(ctx context.Context, in *CategoryItem, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/product.Product/CategoryUpdateOrCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryDelete(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/product.Product/CategoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductList(ctx context.Context, in *base.ListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, "/product.Product/ProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductDetail(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*ProductItem, error) {
	out := new(ProductItem)
	err := c.cc.Invoke(ctx, "/product.Product/ProductDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductUpdateOrCreate(ctx context.Context, in *ProductItem, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/product.Product/ProductUpdateOrCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductDelete(ctx context.Context, in *base.IdReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/product.Product/ProductDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	// Attr 列表
	AttrList(context.Context, *base.ListReq) (*AttrListResp, error)
	// Attr 详情
	AttrDetail(context.Context, *base.IdReq) (*AttrItem, error)
	// Attr 更新或创建
	AttrUpdateOrCreate(context.Context, *AttrItem) (*base.Empty, error)
	// Attr 删除
	AttrDelete(context.Context, *base.IdReq) (*base.Empty, error)
	// Group 列表
	GroupList(context.Context, *base.ListReq) (*GroupListResp, error)
	// Group 详情
	GroupDetail(context.Context, *base.IdReq) (*GroupItem, error)
	// Group 更新或创建
	GroupUpdateOrCreate(context.Context, *GroupItem) (*base.Empty, error)
	// Group 删除
	GroupDelete(context.Context, *base.IdReq) (*base.Empty, error)
	// Category 列表
	CategoryList(context.Context, *base.ListReq) (*CategoryListResp, error)
	// Category 详情
	CategoryDetail(context.Context, *base.IdReq) (*CategoryItem, error)
	// Category 更新或创建
	CategoryUpdateOrCreate(context.Context, *CategoryItem) (*base.Empty, error)
	// Category 删除
	CategoryDelete(context.Context, *base.IdReq) (*base.Empty, error)
	// Product 列表
	ProductList(context.Context, *base.ListReq) (*ProductListResp, error)
	// Product 详情
	ProductDetail(context.Context, *base.IdReq) (*ProductItem, error)
	// Product 更新或创建
	ProductUpdateOrCreate(context.Context, *ProductItem) (*base.Empty, error)
	// Product 删除
	ProductDelete(context.Context, *base.IdReq) (*base.Empty, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) AttrList(context.Context, *base.ListReq) (*AttrListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttrList not implemented")
}
func (UnimplementedProductServer) AttrDetail(context.Context, *base.IdReq) (*AttrItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttrDetail not implemented")
}
func (UnimplementedProductServer) AttrUpdateOrCreate(context.Context, *AttrItem) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttrUpdateOrCreate not implemented")
}
func (UnimplementedProductServer) AttrDelete(context.Context, *base.IdReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttrDelete not implemented")
}
func (UnimplementedProductServer) GroupList(context.Context, *base.ListReq) (*GroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupList not implemented")
}
func (UnimplementedProductServer) GroupDetail(context.Context, *base.IdReq) (*GroupItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDetail not implemented")
}
func (UnimplementedProductServer) GroupUpdateOrCreate(context.Context, *GroupItem) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdateOrCreate not implemented")
}
func (UnimplementedProductServer) GroupDelete(context.Context, *base.IdReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDelete not implemented")
}
func (UnimplementedProductServer) CategoryList(context.Context, *base.ListReq) (*CategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryList not implemented")
}
func (UnimplementedProductServer) CategoryDetail(context.Context, *base.IdReq) (*CategoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryDetail not implemented")
}
func (UnimplementedProductServer) CategoryUpdateOrCreate(context.Context, *CategoryItem) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryUpdateOrCreate not implemented")
}
func (UnimplementedProductServer) CategoryDelete(context.Context, *base.IdReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryDelete not implemented")
}
func (UnimplementedProductServer) ProductList(context.Context, *base.ListReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedProductServer) ProductDetail(context.Context, *base.IdReq) (*ProductItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDetail not implemented")
}
func (UnimplementedProductServer) ProductUpdateOrCreate(context.Context, *ProductItem) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdateOrCreate not implemented")
}
func (UnimplementedProductServer) ProductDelete(context.Context, *base.IdReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelete not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_AttrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AttrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/AttrList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AttrList(ctx, req.(*base.ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AttrDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AttrDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/AttrDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AttrDetail(ctx, req.(*base.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AttrUpdateOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AttrUpdateOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/AttrUpdateOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AttrUpdateOrCreate(ctx, req.(*AttrItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AttrDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AttrDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/AttrDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AttrDelete(ctx, req.(*base.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/GroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GroupList(ctx, req.(*base.ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/GroupDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GroupDetail(ctx, req.(*base.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GroupUpdateOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GroupUpdateOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/GroupUpdateOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GroupUpdateOrCreate(ctx, req.(*GroupItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/GroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GroupDelete(ctx, req.(*base.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/CategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryList(ctx, req.(*base.ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/CategoryDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryDetail(ctx, req.(*base.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryUpdateOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryUpdateOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/CategoryUpdateOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryUpdateOrCreate(ctx, req.(*CategoryItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/CategoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryDelete(ctx, req.(*base.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/ProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductList(ctx, req.(*base.ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/ProductDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductDetail(ctx, req.(*base.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductUpdateOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductUpdateOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/ProductUpdateOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductUpdateOrCreate(ctx, req.(*ProductItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Product/ProductDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductDelete(ctx, req.(*base.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttrList",
			Handler:    _Product_AttrList_Handler,
		},
		{
			MethodName: "AttrDetail",
			Handler:    _Product_AttrDetail_Handler,
		},
		{
			MethodName: "AttrUpdateOrCreate",
			Handler:    _Product_AttrUpdateOrCreate_Handler,
		},
		{
			MethodName: "AttrDelete",
			Handler:    _Product_AttrDelete_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _Product_GroupList_Handler,
		},
		{
			MethodName: "GroupDetail",
			Handler:    _Product_GroupDetail_Handler,
		},
		{
			MethodName: "GroupUpdateOrCreate",
			Handler:    _Product_GroupUpdateOrCreate_Handler,
		},
		{
			MethodName: "GroupDelete",
			Handler:    _Product_GroupDelete_Handler,
		},
		{
			MethodName: "CategoryList",
			Handler:    _Product_CategoryList_Handler,
		},
		{
			MethodName: "CategoryDetail",
			Handler:    _Product_CategoryDetail_Handler,
		},
		{
			MethodName: "CategoryUpdateOrCreate",
			Handler:    _Product_CategoryUpdateOrCreate_Handler,
		},
		{
			MethodName: "CategoryDelete",
			Handler:    _Product_CategoryDelete_Handler,
		},
		{
			MethodName: "ProductList",
			Handler:    _Product_ProductList_Handler,
		},
		{
			MethodName: "ProductDetail",
			Handler:    _Product_ProductDetail_Handler,
		},
		{
			MethodName: "ProductUpdateOrCreate",
			Handler:    _Product_ProductUpdateOrCreate_Handler,
		},
		{
			MethodName: "ProductDelete",
			Handler:    _Product_ProductDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
